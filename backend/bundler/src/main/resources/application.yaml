server:
  port: 8087
  servlet:
    context-path: /
    encoding:
      charset: utf-8
      enabled: true

spring:
  datasource:
    #    driver-class-name: org.mariadb.jdbc.Driver
    #    url: jdbc:mariadb://localhost:3306/bundler?useUnicode=true&characterEncoding=utf-8
    #    username: root
    #    password: ssafy
    url: jdbc:mysql://localhost:3306/bundler?useUnicode=true&characterEncoding=utf-8
    username: ssafy
    password: ssafy
    driver-class-name: com.mysql.cj.jdbc.Driver

    #추가
    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 5
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      data-source-properties:
        rewriteBatchedStatements: true


  output.ansi.enabled: always
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: update  # create, update, none
    #      naming:
    #        strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true
    generate-ddl: true
    properties:
      hibernate:
        #        dialect:
        #        default_schema:
        format_sql: true
    defer-datasource-initialization: true


  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: Asia/Seoul

  security:
    oauth2:
      client:
        registration:
          google: # /oauth2/authorization/google 이 주소를 동작하게 한다.
            client-id: 머시기
            client-secret: 머시기
            scope:
              - email
              - profile

          facebook:
            client-id: 머시기
            client-secret: 머시기
            scope:
              - email
              - public_profile

          github:
            client-id: d747a562f5f038b5b11f
            client-secret: 39da4d41a7beafeaf7c9bf2027577c211c27477c
            scope:
              - repo
              - read:user


          # 네이버는 OAuth2.0 공식 지원대상이 아니라서 provider 설정이 필요하다.
          # 요청주소도 다르고, 응답 데이터도 다르기 때문이다.
          naver:
            client-id: 머시기
            client-secret: 머시기
            scope:
              - name
              - email
              - profile_image
            client-name: Naver # 클라이언트 네임은 구글 페이스북도 대문자로 시작하더라.
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원정보를 json의 response 키값으로 리턴해줌.


logging.level:
  org.hibernate.SQL: debug
  org.hibernate.type: trace
  org:
    springframework:
      boot:
        autoconfigure:
          security: warn
  logging:
    level:
      web: debug


# cors 설정
#cors:
#  allowed-origins: 'http://localhost:3000'
#  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
#  allowed-headers: '*'
#  max-age: 3600


# jwt secret key 설정
jwt.secret: '8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOds'


# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpiry: 1800000 #3분
    refreshTokenExpiry: 604800000 #10080분 == 168시간 == 7일
  oauth2:
    authorizedRedirectUris:
      - http://localhost:3000/oauth/redirect